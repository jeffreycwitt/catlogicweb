{"version":3,"sources":["test.worker.js","Proposition.js","FocusProposition.js","InferredPropositions.js","PropositionCollection.js","Syllogism.js","SyllogismCollection.js","Graph.js","FocusSyllogism.js","PremisePair.js","FocusPremisePair.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Worker","__webpack_public_path__","Proposition","props","p","className","truthvalue","label","heading","type","onClick","f","handleFocusProposition","handleAddToPropositionCollection","handleFocusMajor","handleFocusMinor","handleFocusConclusion","FocusProposition","useState","proposition","quantity","setQuantity","subject","setSubject","quality","setQuality","predicate","setPredicate","setTruthvalue","setProposition","useEffect","C","name","value","onChange","e","target","distribution","contradictory","subaltern","contrary","converse","obverse","contrapose","InferredPropositions","fetchingInferredPropositionsStatus","inferredPropositionSets","length","console","log","inferredDisplayProps","map","ip","i","iterationNumber","resultsCount","displayProps","handleInferUniquePropositions","PropositionCollection","propositions","Syllogism","s","validity","major","minor","conclusion","form","toString","handleAddToSyllogismCollection","SyllogismCollection","syllogisms","Graph","figure","imageSlug","mood","substr","imageurl","src","width","height","FocusSyllogism","syllogism","report","t","testName","PremisePair","pp","FocusPremisePair","premisePair","possibleConclusions","c","App","setPropositions","inferredPropositions","setInferredPropositions","setFetchingInferredPropositionsStatus","setSyllogisms","focusProposition","setFocusProposition","at","at2","at3","setMajor","setMinor","setConclusion","focusSyllogism","setFocusSyllogism","focusPremisePair","setFocusPremisePair","manualFormEntry","setManualFormEntry","functions","set","entranceArrayProps","worker","myWorker","addEventListener","data","newSet","d","newProp","newArray","push","postMessage","originalPropositions","onSubmit","preventDefault","moodFigure","substring","Figure","Mood","Form","majorProposition","minorProposition","conclusionProposition","middleTerm","err","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.25698e41.chunk.js","sourcesContent":["module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"e61641db33ca344574a3.worker.js\");\n};","import React from 'react';\nconst Proposition = (props) => {\n  return (\n    <div>\n    {props.p &&\n    <p className={props.p.truthvalue.label === \"true\" ? \"true\" : \"false\"}>\n      {props.heading} : ({props.p.type().label}) {props.p.label} [{props.p.truthvalue.label}]\n      <button onClick={()=>props.f.handleFocusProposition(props.p)}>Focus</button>\n      <button onClick={()=>props.f.handleAddToPropositionCollection(props.p)}>Collection</button>\n      <button onClick={()=>props.f.handleFocusMajor(props.p)}>Maj</button>\n      <button onClick={()=>props.f.handleFocusMinor(props.p)}>Min</button>\n      <button onClick={()=>props.f.handleFocusConclusion(props.p)}>Concl</button>\n    </p>\n  }\n  </div>\n\n  );\n}\n\nexport default Proposition;\n","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport C from 'catlogicjs'\nimport Proposition from './Proposition'\n\nconst FocusProposition = (props) => {\n  const [quantity, setQuantity] = useState(props.proposition.quantity.label)\n  const [subject, setSubject] = useState(props.proposition.subject.label)\n  const [quality, setQuality] = useState(props.proposition.quality.label)\n  const [predicate, setPredicate] = useState(props.proposition.predicate.label)\n  const [truthvalue, setTruthvalue] = useState(props.proposition.truthvalue.label)\n  const [p, setProposition] = useState(props.proposition)\n  useEffect(() => {\n    setProposition(new C.Proposition(quantity, subject, quality, predicate, truthvalue))\n  }, [quantity, subject, quality, predicate, truthvalue])\n  useEffect(() => {\n    setProposition(props.proposition)\n    setQuantity(props.proposition.quantity.label)\n    setSubject(props.proposition.subject.label)\n    setQuality(props.proposition.quality.label)\n    setPredicate(props.proposition.predicate.label)\n    setTruthvalue(props.proposition.truthvalue.label)\n  }, [props.proposition])\n  return (\n    <div className=\"create-proposition\">\n    <h3>Focused Proposition</h3>\n      <form>\n        <select name=\"quantity\" value={quantity} onChange={(e) => {setQuantity(e.target.value)}}>\n          <option value=\"universal\">universal</option>\n          <option value=\"particular\">particular</option>\n        </select>\n        <input name=\"subject\" value={subject} onChange={(e) => {setSubject(e.target.value)}}/>\n        <select name=\"quality\" value={quality} onChange={(e) => {setQuality(e.target.value)}}>\n          <option value=\"affirmative\">affirmative</option>\n          <option value=\"negative\">negative</option>\n        </select>\n        <input name=\"predicate\" value={predicate} onChange={(e) => {setPredicate(e.target.value)}}/>\n        <select name=\"truthvalue\" value={truthvalue} onChange={(e) => {setTruthvalue(e.target.value)}}>\n          <option value=\"true\">true</option>\n          <option value=\"false\">false</option>\n        </select>\n      </form>\n      <Proposition heading=\"Focused\" p={p} f={props.f}></Proposition>\n      <p>Distribution: {p.subject.label} : {p.subject.distribution(p).label} ; {p.predicate.label} : {p.predicate.distribution(p).label}</p>\n      <div>\n      <h3>Immediate Inferences</h3>\n      <Proposition heading=\"Contradictory\" p={p.contradictory()} f={props.f}></Proposition>\n      <Proposition heading=\"Subaltern\" p={p.subaltern()} f={props.f}></Proposition>\n      <Proposition heading=\"Contrary\" p={p.contrary()} f={props.f}></Proposition>\n      <Proposition heading=\"Converse\" p={p.converse()} f={props.f}></Proposition>\n      <Proposition heading=\"Obverse\" p={p.obverse()} f={props.f}></Proposition>\n      <Proposition heading=\"Contrapose\" p={p.contrapose()} f={props.f}></Proposition>\n      </div>\n    </div>\n  );\n}\n\nexport default FocusProposition;\n","import React from 'react';\nimport Proposition from './Proposition';\n\n\nconst InferredPropositions = (props) => {\n  const displayProps = () => {\n    if (props.fetchingInferredPropositionsStatus === \"fetching\"){\n      return (<p>Calculating</p>)\n    }\n    else if (props.inferredPropositionSets.length > 0){\n      console.log(\"test\", props.inferredPropositionSets)\n      const inferredDisplayProps = props.inferredPropositionSets[props.inferredPropositionSets.length - 1].map((ip, i) => {\n        return <Proposition f={props.f} p={ip.proposition}/>\n      })\n      const iterationNumber = props.inferredPropositionSets.length - 1\n      const resultsCount = props.inferredPropositionSets[props.inferredPropositionSets.length - 1].length\n      return (\n        <div>\n          <p>Iteration Number: {iterationNumber}</p>\n          <p>Results: {resultsCount}</p>\n          {inferredDisplayProps}\n        </div>\n      )\n    }\n    else{\n      return null\n    }\n  }\n\n  const displayInferenceButton = () =>\n  {\n    if (props.inferredPropositionSets.length > 1){\n      if (props.inferredPropositionSets[props.inferredPropositionSets.length - 1].length != props.inferredPropositionSets[props.inferredPropositionSets.length - 2].length){\n        return <button onClick={() => {props.f.handleInferUniquePropositions()}}>Infer Unique</button>\n      }\n      else{\n        return null\n      }\n    }\n    else{\n      return <button onClick={() => {props.f.handleInferUniquePropositions()}}>Infer Unique</button>\n    }\n  }\n\n  return (\n    <div className=\"syllogism\">\n      <div>\n        <h3>Inferred Propositions</h3>\n      </div>\n      <div>\n        {displayProps()}\n      </div>\n      <div>\n        {displayInferenceButton()}\n      </div>\n\n    </div>\n  );\n}\n\nexport default InferredPropositions;\n","import React, {useEffect, useState} from 'react';\nimport Proposition from './Proposition'\nimport C from 'catlogicjs'\n\nconst PropositionCollection = (props) => {\n  return (\n    <div>\n      <h3>Proposition Collection</h3>\n      {\n      props.propositions.map((p,i) => {\n        return <Proposition p={p} f={props.f}/>\n      })\n      }\n      <button onClick={() => {props.f.handleInferUniquePropositions(props.propositions)}}>Infer Unique</button>\n    </div>\n\n  )\n}\nexport default PropositionCollection;\n","import React, {useState} from 'react';\nimport Proposition from './Proposition';\n\nimport './App.css';\nimport C from 'catlogicjs'\n\nconst Syllogism = (props) => {\n  const handleFocusSyllogism = (s) => {\n    props.f.handleFocusMajor(s.major)\n    props.f.handleFocusMinor(s.minor)\n    props.f.handleFocusConclusion(s.conclusion)\n  }\n  return (\n\n      <div className={props.s.validity()? \"valid\" : \"invalid\"}>\n        <div>\n          <Proposition heading=\"Major\" p={props.s.major} f={props.f}/>\n          <Proposition heading=\"Minor\" p={props.s.minor} f={props.f}/>\n          <Proposition heading=\"Conclusion\" p={props.s.conclusion} f={props.f}/>\n        </div>\n        {props.s.form().name() && <p>Name: {props.s.form().name()}</p>}\n        <p>Form: {props.s.form().label} Validity: {props.s.validity().toString()}</p>\n        <button onClick={() => props.f.handleAddToSyllogismCollection(props.s)}>Collection</button>\n        <button onClick={() => handleFocusSyllogism(props.s)}>Focus</button>\n\n      </div>\n\n  );\n}\n\nexport default Syllogism;\n","import React, {useEffect, useState} from 'react';\nimport Syllogism from './Syllogism'\n\nconst SyllogismCollection = (props) => {\n  return (\n    <div>\n    <h3>Syllogism Collection</h3>\n    {\n    props.syllogisms.map((s,i) => {\n      return(\n      <div>\n        <Syllogism s={s} f={props.f}/>\n      </div>\n      )\n    })\n    }\n    </div>\n\n  )\n}\nexport default SyllogismCollection;\n","import React from 'react';\n\nconst Graph = (props) => {\n  const figure = props.figure\n  const premisePair = props.mood.substr(0, 2);\n  const imageSlug = premisePair + figure \n  const imageurl = \"https://s3.amazonaws.com/lum-faculty-jcwitt-public/CatSylGraphs/\" + imageSlug + \".png\"\n  return (\n    <>\n    {imageSlug.length === 3 && <img src={imageurl} width=\"100px\" height=\"100px\"/>}\n    </>\n  );\n}\n\nexport default Graph;\n","import React from 'react';\nimport Syllogism from './Syllogism';\nimport Graph from './Graph';\n\nimport './App.css';\nimport C from 'catlogicjs'\n\nconst FocusSyllogism = (props) => {\n  return (\n    <div className=\"syllogism\">\n      <div>\n        <h3>Focused Syllogism</h3>\n        <Syllogism s={props.syllogism} f={props.f}/>\n        <Graph mood={props.syllogism.mood().label} figure={props.syllogism.figure().label}/>\n      </div>\n      <div>\n        <h3>Validity Tests</h3>\n        {props.syllogism.report().map((t,i) => {\n          return <p>{t.testName}: {t.validity.toString()}</p>\n        })\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default FocusSyllogism;\n","import React, {useState} from 'react';\nimport Proposition from './Proposition';\n\nimport './App.css';\nimport C from 'catlogicjs'\n\nconst PremisePair = (props) => {\n  return (\n\n      <div>\n        <Proposition heading=\"Major\" p={props.pp.major} f={props.f}/>\n        <Proposition heading=\"Minor\" p={props.pp.minor} f={props.f}/>\n      </div>\n\n  );\n}\n\nexport default PremisePair;\n","import React from 'react';\nimport Syllogism from './Syllogism';\nimport PremisePair from './PremisePair';\n\nimport './App.css';\nimport C from 'catlogicjs'\n\nconst FocusPremisePair = (props) => {\n  return (\n    <div className=\"syllogism\">\n      <div>\n        <h3>Focused Premise Pair</h3>\n        <PremisePair pp={props.premisePair} f={props.f}/>\n      </div>\n      <div>\n        <h3>Possible Syllogisms</h3>\n        {props.premisePair.possibleConclusions().map((c,i) => {\n          return <Syllogism s={new C.Syllogism(props.premisePair.major, props.premisePair.minor, c)} f={props.f}/>\n        })\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default FocusPremisePair;\n","import React, {useState, useEffect} from 'react';\nimport FocusProposition from './FocusProposition';\nimport InferredPropositions from './InferredPropositions';\nimport PropositionCollection from './PropositionCollection';\nimport SyllogismCollection from './SyllogismCollection';\nimport FocusSyllogism from './FocusSyllogism';\nimport FocusPremisePair from './FocusPremisePair';\n\nimport myWorker from \"./test.worker\";\n\nimport './App.css';\nimport C from 'catlogicjs'\n\nconst App = () => {\n  const [propositions, setPropositions] = useState([])\n  const [inferredPropositions, setInferredPropositions] = useState([])\n  const [fetchingInferredPropositionsStatus, setFetchingInferredPropositionsStatus] = useState(\"\")\n  const [syllogisms, setSyllogisms] = useState([])\n  const [focusProposition, setFocusProposition] = useState(new C.Proposition(\"universal\", \"dogs\", \"affirmative\", \"animals\", \"true\"))\n  const at = new C.Proposition(\"universal\", \"dogs\", \"affirmative\", \"animals\", \"true\")\n  const at2 = new C.Proposition(\"universal\", \"cute things\", \"affirmative\", \"dogs\", \"true\")\n  const at3 = new C.Proposition(\"universal\", \"cute things\", \"affirmative\", \"animals\", \"true\")\n  const [major, setMajor] = useState(at)\n  const [minor, setMinor] = useState(at2)\n  const [conclusion, setConclusion] = useState(at3)\n  const [focusSyllogism, setFocusSyllogism] = useState(new C.Syllogism(major, minor, conclusion))\n  const [focusPremisePair, setFocusPremisePair] = useState(new C.PremisePair(major, minor))\n  const [manualFormEntry, setManualFormEntry] = useState(\"\")\n\n  useEffect(() => {\n    \n  }, [])\n\n  const handleInferUniquePropositions = (set) => {\n    // get last set of newly inferred propositions\n    const entranceArrayFlat = inferredPropositions[inferredPropositions.length - 1]\n    // modify array from output array of objects to input array of individual propositions\n    const entranceArrayProps = entranceArrayFlat.map((p, i) => {\n      return  p.proposition ? p.proposition : p\n    })\n    // webworker\n      const worker = new myWorker()\n      // set response when webworker is done\n      worker.addEventListener(\"message\", e => {\n        setFetchingInferredPropositionsStatus(\"\")\n        console.log('[MAIN] MSG FROM WORKER: ', e.data)\n        // conver returned data to include Proposition object\n        const newSet = e.data.map((d) => {\n          const p = d.proposition\n          const newProp = new C.Proposition(p.quantity.label, p.subject.label, p.quality.label, p.predicate.label, p.truthvalue.label)\n          d.proposition = newProp\n          console.log(\"new d\", d)\n          return d\n        })\n        console.log(\"newSet\", newSet)\n        //load existing props into new Array\n        const newArray = [...inferredPropositions]\n        // ad new Set to new array\n        newArray.push(newSet)\n        setInferredPropositions(newArray)\n      }, false)\n      // begin fetching message\n      setFetchingInferredPropositionsStatus(\"fetching\")\n      // send propositions to worker\n      worker.postMessage(entranceArrayProps)\n      \n  }\n\n  const handleAddToSyllogismCollection = (syllogism) => {\n    setSyllogisms([...syllogisms, syllogism])\n  }\n  const handleAddToPropositionCollection = (proposition) => {\n    setPropositions([...propositions, proposition])\n    setInferredPropositions([[...propositions, proposition]])\n  }\n  const handleFocusProposition = (proposition) => {\n    setFocusProposition(proposition)\n  }\n  const handleFocusMajor = (proposition) => {\n    setMajor(proposition)\n  }\n  const handleFocusMinor = (proposition) => {\n    setMinor(proposition)\n  }\n  const handleFocusConclusion = (proposition) => {\n    setConclusion(proposition)\n  }\n  useEffect(() => {\n    setFocusSyllogism(new C.Syllogism(major, minor, conclusion))\n    setFocusPremisePair(new C.PremisePair(major, minor))\n  }, [major, minor, conclusion])\n\n  /**\n   * \n   * @param {string} mood e.g. \"AAA\"\n   * @param {string} figure  \"1\"\n   */\n  const handleManualSetSyllogism = (e) => {\n    e.preventDefault();\n    try{\n      const moodFigure = manualFormEntry;\n      const major = moodFigure.substring(0,1);\n      const minor = moodFigure.substring(1,2);\n      const conclusion = moodFigure.substring(2,3);\n      const figure = new C.Figure(moodFigure.substring(3,4))\n      console.log(\"figure\", figure)\n      const mood = new C.Mood(major, minor, conclusion)\n      const form = new C.Form(mood, figure)\n      const majorProposition = form.majorProposition()\n      console.log(majorProposition)\n      const minorProposition = form.minorProposition()\n      console.log(minorProposition)\n      const conclusionProposition = form.conclusion()\n      console.log(conclusionProposition)\n      //NOTE/TODO: I would prefer to do form.syllogism(). this works in the catlogicjs test; \n      //but I think something about the order of class imports in catlogicjs index.js \n      //is messing this up and preventing it from working\n      const syllogism = new C.Syllogism(majorProposition, minorProposition, conclusionProposition)\n      console.log(syllogism.figure())\n      console.log(\"middle term\", syllogism.middleTerm())\n      \n      setMajor(majorProposition)\n      setMinor(minorProposition)\n      setConclusion(conclusionProposition)\n      \n    }\n    catch(err){\n      console.log(\"error\", err)\n    }\n    \n  }\n\n  const functions = {\n    handleAddToPropositionCollection,\n    handleAddToSyllogismCollection,\n    handleFocusProposition,\n    handleFocusMajor,\n    handleFocusMinor,\n    handleFocusConclusion,\n    handleInferUniquePropositions\n  }\n  return (\n    <div className=\"App\">\n      <div>\n        <FocusProposition f={functions} proposition={focusProposition}/>\n        <PropositionCollection f={functions} propositions={propositions}/>\n        <InferredPropositions f={functions} inferredPropositionSets={inferredPropositions} originalPropositions={propositions} fetchingInferredPropositionsStatus={fetchingInferredPropositionsStatus}/>\n      </div>\n      <div>\n        <FocusPremisePair f={functions} premisePair={focusPremisePair}/>\n      </div>\n      <div>\n        <FocusSyllogism f={functions} syllogism={focusSyllogism}/>\n        <form onSubmit={handleManualSetSyllogism}>\n        <input onChange={e =>setManualFormEntry(e.target.value)}/><input type=\"submit\"/>\n        </form>\n        <SyllogismCollection f={functions} syllogisms={syllogisms}/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}